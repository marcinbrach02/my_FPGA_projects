module debouncer( input wire RST, input wire CLK, input wire I, output regO );

parameter MIN_LEN = 8;
localparamWAIT_I= 0, SET_O= 1, DECR_DCNT= 2;

reg[2:0] state, next_state;
reg[7:0] DCNT;

always @ (posedgeCLK or posedgeRST)// always block to update the present state
	if (RST) state <= WAIT_I;
	else state <= next_state;

always @ (*)// always block to calculate the next state
begin
	case (state)
		WAIT_I : if ( I) next_state<= SET_O;
			else next_state<= WAIT_I;
		SET_O: next_state<= DECR_DCNT;
		DECR_DCNT: if (DCNT==0) next_state<= WAIT_I;
				else next_state<= DECR_DCNT;
	default : next_state<= WAIT_I;
	endcase
end


always@(posedgeCLKorposedgeRST)
	if(RST) DCNT <= 'd0;
	elseif(next_state==SET_O ) DCNT <= MIN_LEN ;
	else if(next_state==DECR_DCNT) DCNT <= DCNT -'d1;
	else DCNT<= DCNT;

always@(posedgeCLKorposedgeRST)
	if(RST) O<= 1’b0;
	elseif(next_state== SET_O) O<= 1’b1;
	else O<= 1’b0;


endmodule

















